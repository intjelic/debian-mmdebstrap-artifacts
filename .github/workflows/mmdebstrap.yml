name: mmdebstrap

on:
  push:
    branches: [ master ]

jobs:
  mmdebstrap:
    runs-on: ubuntu-latest
    container:
      image: debian:buster
      options: --privileged

    strategy:
      matrix:
        arch: ["amd64"]
        version: ["buster"]
        variant: ["standard"]
        network: ["ifupdown", "systemd-networkd", "network-manager"]
        # arch: ["armhf", "arm64", "amd64"]
        # version: ["stretch", "buster", "bullseye"]
        # variant: ["essential", "required", "important", "standard"]
        # network: ["ifupdown", "systemd-networkd", "network-manager"]

    env:
      ARTIFACT_NAME: debian-${{ matrix.version }}-${{ matrix.variant }}-${{ matrix.arch }}

    steps:
      - name: Install dependencies (amd64)
        if: ${{ matrix.arch == 'amd64' }}
        run: |
          apt-get update
          apt-get install -y --no-install-recommends mmdebstrap

      # The mmdebstrap tool needs binfmt-support and qemu-user-static packages
      # installed when creating Debian filesystem for an architecture different
      # than the host architecture.
      - name: Install dependencies (not amd64)
        if: ${{ matrix.arch != 'amd64' }}
        run: |
          apt-get update
          apt-get install -y --no-install-recommends mmdebstrap binfmt-support qemu-user-static

      - name: Compute system packages (armhf)
        if: ${{ matrix.arch == 'armhf' }}
        run: echo "system_packages=systemd-sysv,udev,linux-image-armmp-lpae:armhf" >> $GITHUB_ENV

      - name: Compute system packages (arm64)
        if: ${{ matrix.arch == 'arm64' }}
        run: echo "system_packages=systemd-sysv,udev,linux-image-arm64" >> $GITHUB_ENV

      - name: Compute system packages (amd64)
        if: ${{ matrix.arch == 'amd64' }}
        run: echo "system_packages=systemd-sysv,udev,linux-image-amd64" >> $GITHUB_ENV

      - name: Compute network packages (ifupdown)
        if: ${{ matrix.network == 'ifupdown' }}
        run: echo "network_packages=ifupdown,isc-dhcp-client" >> $GITHUB_ENV

      - name: Compute network packages (systemd-networkd)
        if: ${{ matrix.network == 'systemd-networkd' }}
        run: echo "network_packages=systemd" >> $GITHUB_ENV

      - name: Compute network packages (network-manager)
        if: ${{ matrix.network == 'network-manager' }}
        run: echo "network_packages=network-manager" >> $GITHUB_ENV

      - name: Create filesystem
        run: |
          MAIN_PKGS=debian-archive-keyring,initramfs-tools,kmod,e2fsprogs,btrfs-progs,locales,tzdata,apt-utils,whiptail,debconf-i18n,keyboard-configuration,console-setup

          mkdir artifact
          mmdebstrap \
            --architectures=${{ matrix.arch }} \
            --variant=${{ matrix.variant }} \
            --components="main" \
            --include=${{ env.system_packages }},${{ env.network_packages }},$MAIN_PKGS \
            ${{ matrix.version }} artifact/${{ env.ARTIFACT_NAME }}

      - name: Set root password (amd64)
        if: ${{ matrix.arch == 'amd64' }}
        run: chroot artifact/${{ env.ARTIFACT_NAME }} /bin/bash -c "echo root:root | chpasswd"

      - name: Set root password (armhf)
        if: ${{ matrix.arch == 'armhf' }}
        run: |
          cp /usr/bin/qemu-arm-static artifact/${{ env.ARTIFACT_NAME }}/usr/bin
          chroot artifact/${{ env.ARTIFACT_NAME }} qemu-arm-static /bin/bash -c "echo root:root | chpasswd"

          rm artifact/${{ env.ARTIFACT_NAME }}/usr/bin/qemu-arm-static

      - name: Set root password (arm64)
        if: ${{ matrix.arch == 'arm64' }}
        run: |
          cp /usr/bin/qemu-aarch64-static artifact/${{ env.ARTIFACT_NAME }}/usr/bin
          chroot artifact/${{ env.ARTIFACT_NAME }} qemu-aarch64-static /bin/bash -c "echo root:root | chpasswd"

          rm artifact/${{ env.ARTIFACT_NAME }}/usr/bin/qemu-aarch64-static

      - name: Extract boot files
        run: |
          mv artifact/${{ env.ARTIFACT_NAME }}/boot/* artifact
          rm -r artifact/${{ env.ARTIFACT_NAME }}/boot

      - name: Create artifact
        run: (cd artifact && tar -czvf ../${{ env.ARTIFACT_NAME }}.tar.gz *)

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          retention-days: 1
